# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/197o7eo55U9tp3mILGeYiTZ-bN3tC9byl
"""

import matplotlib.pyplot as plt
import numpy as np

"""# CANTILIEVER BEAM

## POINT LOAD
"""

L=int(input("Enter the lenth of the beam:"))
P=int(input("Enter the value of load:"))
l=int(input("Enter the position of the load:"))

"""**SF**"""

x1=np.linspace(0,l)
x2=np.linspace(l,L)
x=list(x1)+list(x2)
z = [int(i<=l) for i in x ]
SF=[P*j for j in z]
print(x)
print(SF)

plt.plot(x,SF,'r')
plt.xlabel('Length')
plt.ylabel('SF')
plt.title('Shear Force Diagram')
plt.show()

"""**BM**"""

-(P*(l-8))

BM1=[-(P*(l-i)) for i in x1]
BM2=[int(i<=l) for i in x2]
BM=BM1+BM2

plt.plot(x,BM,'r')
plt.xlabel('Length')
plt.ylabel('BM')
plt.title('Bending Moment Diagram')
plt.show()

"""## UDL"""

L=int(input("Enter the lenth of the beam:"))
w=int(input("Enter the value of load:"))

"""**SF**"""

x=np.linspace(0,L)
SF=w*(L-x)

plt.plot(x,SF,'r')
plt.xlabel('Length')
plt.ylabel('SF')
plt.title('Shear Force Diagram')
plt.show()

x=np.linspace(0,L)
BM=-(w*((L-x)**2)/2)

plt.plot(x,BM,'r')
plt.xlabel('Length')
plt.ylabel('BM')
plt.title('Bending Moment Diagram')
plt.show()

"""## Gradually Increasing Load"""

L=int(input("Enter the lenth of the beam:"))
w=int(input("Enter the value of the maximum load:"))

"""**SF**"""

x=np.linspace(0,L)
SF=(w*(L**2-x**2))/(2*L)

plt.plot(x,SF,'r')
plt.xlabel('Length')
plt.ylabel('SF')
plt.title('Shear Force Diagram')
plt.show()

"""**BM**"""

BM=[]
l2=[]
for k in range(L,-1,-1):
  m=0
  x=L-k
  px=((w/L)*k)
  a1=(w-px)*(x/2)
  a2=(px*x)
  cg1=(2*x)/3
  cg2=(x/2)
  try:
    cg=((a1*cg1)+(a2*cg2))/(a1+a2)
  except:
    cg=0
  finally:
    pt=a1+a2
    mt=pt*cg
    m=m+mt
    BM.append((m*-1))
    l2.append(k)

plt.plot(l2,BM,'r')
plt.xlabel('Length')
plt.ylabel('BM')
plt.title('Bending Moment Diagram')
plt.show()

"""## Gradually Decreasing Load"""

L=int(input("Enter the lenth of the beam:"))
w=int(input("Enter the value of the maximum load:"))

"""**SF**"""

x=np.linspace(0,L)
SF=(w*((L**2)-(L*x)+(x**2)))/(2*L)

plt.plot(x,SF,'r')
plt.xlabel('Length')
plt.ylabel('SF')
plt.title('Shear Force Diagram')
plt.show()

"""**BM**"""

x=np.linspace(0,L)
BM=-(w*((L-x)**3)/(6*L))

plt.plot(x,BM,'r')
plt.xlabel('Length')
plt.ylabel('BM')
plt.title('Bending Moment Diagram')
plt.show()

"""## Multiple point loads"""

L=int(input("Enter the lenth of the beam:"))*100
n=int(input("Enter the number of loads:"))
l=[]
p={}
for i in range(n):
  l.append(int(input("Enter the position of the "+str(i)+"th load:"))*100)
  p[l[i]]=int(input("Enter the value of "+str(i)+"th load:"))

l.append(l[i]+1)  
print(l)
print(p)

l.sort()
R=0
T=0
for i in range(n):
  T=T+p[l[i]]
R=T
#print(R)
SF=[]
l1=[]
p1=0
i=0
lim=int(L+1)
#print(lim)
for j in range(lim): 
  #print(j)
  while i<n+1 :
    if j < l[i] :
      SF.append(R-p1)
      l1.append(j)
      break
    elif j<l[-1]:
          p1=p1+p[l[i]]
          # print(p1)
          i=i+1
    else:
        SF.append(0)
        l1.append(j) 
        break

print(SF)      
print(l1)

BM=[]
l2=[]
for k in range(L,-1,-1):
    m=0
    i=n-1
    while i>= 0:
        # print(k)
        # print(l[i])
        if k < l[i]:
           x=l[i]-k
           m=m+p[l[i]]*x
           # print(m)
        i=i-1
    BM.append((m*-1))
    l2.append(k)

print(BM)
print(l2)

"""### SF"""

l11=[i/100 for i in l1]
plt.plot(l11,SF,'r')
plt.xlabel('Length')
plt.ylabel('SF')
plt.title('Shear Force Diagram')
plt.show()

"""### BM"""

l22=[i/100 for i in l2]
plt.plot(l22,BM,'r')
plt.xlabel('Length')
plt.ylabel('BM')
plt.title('Bending Moment Diagram')
plt.show()

"""## Multiple UDL"""

L=int(input("Enter the lenth of the beam:"))
n=int(input("Enter the number of UDL:"))
l=[]
p={}
ln={}
for i in range(n):
  l.append(int(input("Enter the start position of the "+str(i)+"th load:")))
  p[l[i]]=int(input("Enter the value of "+str(i)+"th UDL:"))
  ln[l[i]]=int(input("Enter the end position of the "+str(i)+"th load:"))

l.append(l[i]+1)  
print(l)
print(p)

l.sort()
R=0
for i in range(n):
   R=R+p[l[i]]*(ln[l[i]]-l[i])

SF=[]
l1=[]
for k in range(L+1):
    p1=R
    i=0
    while i < n:
        # print(k)
        # print(l[i])
        if k > l[i]:
            if k <ln[l[i]]:
                x=k-l[i]
                p1=p1-(p[l[i]]*x)
            else:
                x=ln[l[i]]-l[i]
                p1=p1-(p[l[i]]*x) 
        
        i=i+1
    SF.append(p1)
    l1.append(k)
BM=[]
l2=[]
for k in range(L,-1,-1):
     m=0
     i=n-1
     while i>= 0:
         # print(k)
         # print(l[i])
         if k < ln[l[i]]:
            if k > l[i]:
                x=ln[l[i]]-k
                m=m+(p[l[i]]*x*(x/2))
            else:
                y=ln[l[i]]-l[i]
                x=(y/2)+l[i]-k
                m=m+(p[l[i]]*x*y)
         i=i-1
     BM.append((m*-1))
     l2.append(k)

print(SF)      
print(l1)
print(BM)
print(l2)

"""### SF"""

plt.plot(l1,SF,'r')
plt.xlabel('Length')
plt.ylabel('SF')
plt.title('Shear Force Diagram')
plt.show()

"""### BM"""

plt.plot(l2,BM,'r')
plt.xlabel('Length')
plt.ylabel('BM')
plt.title('Bending Moment Diagram')
plt.show()

"""## Multiple Gradually Increasing Load"""

L=int(input("Enter the lenth of the beam:"))
n=int(input("Enter the number of Gradually Increasing Load:"))
l=[]
p1={}
p2={}
ln={}
v={}
for i in range(n):
  l.append(int(input("Enter the start position of the "+str(i)+"th load:")))
  p1[l[i]]=int(input("Enter the start value of "+str(i)+"th GIL:"))
  ln[l[i]]=int(input("Enter the end position of the "+str(i)+"th load:"))
  p2[l[i]]=int(input("Enter the end value of "+str(i)+"th GIL:"))
  v[l[i]]=((p2[l[i]]-p1[l[i]])/(ln[l[i]]-l[i]))

l.append(l[i]+1)  
# print(l)
# print(p1)
# print(ln)
# print(p2)

l.sort()
R=0
for i in range(n):
   R=R+(((p1[l[i]]+p2[l[i]])*(ln[l[i]]-l[i]))/2)

SF=[]
l1=[]
for k in range(L+1):
    p=R
    i=0
    while i < n:
        # print(k)
        # print(l[i])
        if k > l[i]:
            if k <ln[l[i]]:
                x=k-l[i]
               # print(x)
                px=(v[l[i]]*x)+float(p1[l[i]])
                # print(px)
                pt=((px+p1[l[i]])*x)/2
                # print(pt)
                p=p-pt
            else:
                x=ln[l[i]]-l[i]
                # print(x)
                px=(v[l[i]]*x)+float(p1[l[i]])
                # print(px)
                pt=((px+p1[l[i]])*x)/2
                # print(pt)
                p=p-pt
        i=i+1
    SF.append(p)
    l1.append(k)
print(SF)      
print(l1)

BM=[]
l2=[]
for k in range(L,-1,-1):
      m=0
      i=n-1
      while i>= 0:
          # print(k)
          # print(l[i])
          if k < ln[l[i]]:
            if k > l[i]:
                x=ln[l[i]]-k
                print(x)
                y=k-l[i]
                print(y)
                px=(v[l[i]]*(k-l[i]))+p1[l[i]]
                a1=(p2[l[i]]-px)*(x/2)
                a2=(px*x)
                cg1=(2*x)/3
                cg2=(x/2)
                try:
                  cg=((a1*cg1)+(a2*cg2))/(a1+a2)
                except:
                  cg=0
                finally:
                  pt=a1+a2
                  mt=pt*cg
                  m=m+mt
            else:
                x=ln[l[i]]-l[i]
                px=(v[l[i]]*(l[i]-l[i]))+p1[l[i]]
                a1=(p2[l[i]]-px)*(x/2)
                print(a1)
                a2=(px*x)
                print(a2)
                cg1=(2*x)/3
                cg2=(x/2)
                try:
                  cg=((a1*cg1)+(a2*cg2))/(a1+a2)
                except:
                  cg=0
                finally:
                  pt=a1+a2
                  mt=pt*cg
                  m=m+mt
          i=i-1
      BM.append((m*-1))
      l2.append(k)

print(BM)
print(l2)

"""**SF**"""

l11=[i/100 for i in l1]
plt.plot(l11,SF,'r')
plt.xlabel('Length')
plt.ylabel('SF')
plt.title('Shear Force Diagram')
plt.show()

"""**BM**"""

plt.plot(l2,BM,'r')
plt.xlabel('Length')
plt.ylabel('BM')
plt.title('Bending Moment Diagram')
plt.show()

"""## Multiple Gradually Decreasing Load"""

L=int(input("Enter the lenth of the beam:"))#*100
n=int(input("Enter the number of Gradually Increasing Load:"))
l=[]
p1={}
p2={}
ln={}
v={}
for i in range(n):
  l.append(int(input("Enter the start position of the "+str(i)+"th load:")))#*100)
  p1[l[i]]=int(input("Enter the start value of "+str(i)+"th GIL:"))
  ln[l[i]]=int(input("Enter the end position of the "+str(i)+"th load:"))#*100
  p2[l[i]]=int(input("Enter the end value of "+str(i)+"th GIL:"))
  v[l[i]]=((p1[l[i]]-p2[l[i]])/(ln[l[i]]-l[i]))

l.append(l[i]+1)  
# print(l)
# print(p1)
# print(ln)
# print(p2)

l.sort()
R=0
for i in range(n):
   R=R+(((p1[l[i]]+p2[l[i]])*(ln[l[i]]-l[i]))/2)

SF=[]
l1=[]
for k in range(L+1):
    p=R
    i=0
    while i < n:
        # print(k)
        # print(l[i])
        if k > l[i]:
            if k <ln[l[i]]:
                x=ln[l[i]]-k
                y=k-l[i]
                # print(x)
                px=(v[l[i]]*x)+float(p2[l[i]])
                # print(px)
                pt=((px+p1[l[i]])*y)/2
                # print(pt)
                p=p-pt
            else:
                x=0
                y=ln[l[i]]-l[i]
                # print(x)
                px=(v[l[i]]*x)+float(p2[l[i]])
                # print(px)
                pt=((px+p1[l[i]])*y)/2
                # print(pt)
                p=p-pt
        i=i+1
    SF.append(p)
    l1.append(k)
# BM=[]
# l2=[]
# for k in range(L,-1,-1):
#       m=0
#       i=n-1
#       while i>= 0:
#           # print(k)
#           # print(l[i])
#           if k < ln[l[i]]:
#             if k > l[i]:
#                 x=ln[l[i]]-k
#                 print(x)
#                 y=k-l[i]
#                 print(y)
#                 px=(v[l[i]]*(k-l[i]))+p1[l[i]]
#                 a1=(p2[l[i]]-px)*(x/2)
#                 a2=(px*x)
#                 cg1=(2*x)/3
#                 cg2=(x/2)
#                 cg=((a1*cg1)+(a2*cg2))/(a1+a2)
#                 pt=a1+a2
#                 mt=pt*cg
#                 m=m+mt
#             else:
#                 x=ln[l[i]]-l[i]
#                 px=(v[l[i]]*(l[i]-l[i]))+p1[l[i]]
#                 a1=(p2[l[i]]-px)*(x/2)
#                 print(a1)
#                 a2=(px*x)
#                 print(a2)
#                 cg1=(2*x)/3
#                 cg2=(x/2)
#                 cg=((a1*cg1)+(a2*cg2))/(a1+a2)
#                 pt=a1+a2
#                 mt=pt*cg
#                 m=m+mt
#           i=i-1
#       BM.append((m*-1))
#       l2.append(k)

print(SF)      
print(l1)
# print(BM)
# print(l2)

"""**SF**"""

#l11=[i/100 for i in l1]
plt.plot(l1,SF,'r')
plt.xlabel('Length')
plt.ylabel('SF')
plt.title('Shear Force Diagram')
plt.show()

"""**BM**"""

plt.plot(l2,BM,'r')
plt.xlabel('Length')
plt.ylabel('BM')
plt.title('Bending Moment Diagram')
plt.show()
